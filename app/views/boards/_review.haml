:javascript
  function checkForComment() { comment_text = $('comment_comment').value; $('vote_submit').disabled = comment_text.replace(/^\s+|\s+$/g, '') == ""; }
  function preventDoubleVote() { set_conf_false_vote();  $('vote_submit').hide();  }
- if identifier.modified?
  %h3 Votes
  -# user_has_voted = identifier.user_has_voted?(@current_user)#false
  - user_has_voted = identifier.publication.user_has_voted?(@current_user.id)
  %ul
    - if identifier.publication.votes.length == 0
      %li No votes yet.
    - else
      - identifier.publication.votes.each do |vote|
        %li
          = vote.choice
          = vote.user.name
          -# if vote.user.name == @current_user.name
            - user_has_voted = true
  %br
  - if !user_has_voted && identifier.publication.status == "voting"
    = form_for Vote.new({:publication_id => identifier.publication.id, :identifier_id => identifier.id}), :as => :vote, :url => { :controller => "publications", :action => "vote", :id => identifier.publication.id } do |f|
      #submit
        = f.hidden_field :publication_id
        = f.hidden_field :identifier_id
        Your Vote:
        %br
        - choices = Hash.new
        - identifier.publication.owner.decrees.each do |d|
          - d.get_choice_array.each do |c|
            - choices[c] = c
        = select "vote", "choice", choices, {:include_blank => true}
        %br
        Your Comment Required:
        %br
        = text_area :comment, "comment", :onkeyup => "checkForComment(event)", :class => 'observechangevote'
        -#= f.submit "Vote", :disabled => !publication.mutable?
        = f.submit "Vote", :id => 'vote_submit', :disabled => true, :onclick => 'preventDoubleVote()'
