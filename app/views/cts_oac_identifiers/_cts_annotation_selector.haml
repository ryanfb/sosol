:javascript
  
  var inventories = {};
  var body_span = [];
  var repos = {};
  var body_urn_parts = {};
  var body_subref_start;
  var body_subref_end;
  
  function get_repos() {
    var request_url = "#{root_url}cts/getrepos/#{@identifier.parentIdentifier.id}"
    new Ajax.Request(request_url, {
      method: 'get',
      dataType: 'application/json',
      onSuccess: function(response) {
        repos = eval ('('+response.responseText +')');
        populate_body_repo();
      }
    });
  }
  
  function populate_body_repo() {
    update_body_urn_parts();
    for (key in repos.keys) {
      var label = key;
      // if the repo is for the publication it will be all digits override the label
      if (label.match(/^\d+$/) ){
        label = "This Publication"
      }
      $('body_repo').insert("<option value='" + key + "'>" + label + "</option>");
    }
    $('body_repo').insert("<option value='-'>click to select...</option>");
    $(body_repo).childElements().each(function(o){
        if(o.value==body_urn_parts.repos){o.selected = true;get_inventory();throw $break;}
      });
  }
  
  function get_inventory()
  {
      var inventory = $F('body_repo');
      if (inventory == '-') {
        update_group_urns();
      // if we don't already have this inventory's data, retrieve it and populate the selector
      } else if (inventories[inventory] == null) {
        var request_url = "#{root_url}cts/getcapabilities/" + inventory;

        new Ajax.Request(request_url, {
            method: 'get',
            dataType: 'application/json',
            onSuccess: function(response) {
              inventories[inventory] = eval ('('+response.responseText +')');
              update_group_urns();
            }
          });
      }
      else {
        update_group_urns();
      }
  }
   
  function clear_selector(select_element) {
    select_element.childElements().each(Element.remove);
  }
  
  function populate_selector(select_element,options,selected_value) {
    select_element.childElements().each(Element.remove);
    
    var count = 0
    for (var k=0; k<options.length; k++) {
      var obj = options[k]
      for (var i in obj)
      {
        if (obj[i].urn != null) {
          select_element.insert("<option value='" + obj[i].urn + "'>" + obj[i].label + "</option>");
          count++;
        }
      }
    }
    if (count == 0) {
      select_element.disabled = true;
      select_element.hide();
    } else {
      if (count > 1) {
        select_element.insert("<option value=''>click to select...</option>");
      } 
      select_element.disabled = false;
      select_element.show();
    }
    select_element.childElements().each(function(o){
        if(o.value == selected_value){
          o.selected = true;
          throw $break;
        }
    });
  }
  
  function update_group_urns() {
    $('request_button').disabled = true;
    clear_selector($('version_urn'));
    clear_selector($('work_urn'));
    var inventory = $F('body_repo');
    if (inventory == '-') {
      clear_selector($('group_urn'));
    } else {
      //  populate the textgroup selector
      var groups = inventories[inventory];
      populate_selector($('group_urn'),[groups],body_urn_parts.textgroup);
      update_work_urns();
    }
  }
  
  function update_work_urns() {
    $('request_button').disabled = true;
    clear_selector($('version_urn'));
    // get the works for the selected textgroup and populate the work selector
    var inventory = $F('body_repo');
    var textgroup = $F('group_urn');
    if (textgroup) { 
      var works = inventories[inventory][textgroup].works;
      populate_selector($('work_urn'),[works],body_urn_parts.work);
      update_version_urns();
    }
  }
  
  function update_version_urns()
  {
    $('request_button').disabled = true;
    // get the editions for the selected textgroup and work and populate the edition selector
    var inventory = $F('body_repo');
    var textgroup = $F('group_urn');
    var work = $F('work_urn');
    var editions = null;
    var translations = null;
    if (inventory && textgroup && work) {
      work = work.replace(textgroup+".",''); 
      editions = inventories[inventory][textgroup].works[work].editions
      translations = inventories[inventory][textgroup].works[work].translations
      
    }
    if (editions != null ) {
      populate_selector($('version_urn'),[editions,translations],body_urn_parts.version)
    } else {
      // still need to empty it out
      populate_selector($('version_urn'),[{}])
      $('request_button').disabled = true;
    }
    update_cite_info();
  }
  
  function update_body_urn_parts() {
    // check to see if the pre-populated URI is from one of the registered repositories
    urn_match = $('body_uri').getValue().match(/^(.*?)\/(urn:cts:.*)$/)    
    if (urn_match != null) {
      urispace = urn_match[1];
      urn = urn_match[2];
      body_urn_parts.repos = repos.urispaces[urispace];
      // try again with the identifier if the end of the uri is digits because it might be from the pub
      if (! body_urn_parts.repos) {
        var match_pub = urispace.match(/^(.*?)\/\d+$/);
        if (match_pub) {
          body_urn_parts.repos = repos.urispaces[match_pub[1]];
        }
      }
      urn_parts = urn.split(':');
      version_parts = urn_parts[3].split('.');
      body_urn_parts.textgroup = urn_parts[2] + ':' + version_parts[0];
      body_urn_parts.work = urn_parts[2] + ':' + version_parts[0] + "." + version_parts[1];
      body_urn_parts.version = [urn_parts[0],urn_parts[1],urn_parts[2],urn_parts[3]].join(':');
      if (urn_parts.length == 5) {
        body_urn_parts.passage = urn_parts[4].split('@')[0];
      }
    } 
    else {
      body_urn_parts = {}; 
    }
  }
  
  function update_cite_info() {
    // clear the #citeinfo div in the form
    $('citeinfo').innerHTML = '';
    $('request_button').disabled = true;
    // get the current edition and repo from the form input
    var inventory = $F('body_repo');
    var textgroup = $F('group_urn');
    var work = $F('work_urn');
    if (inventory && textgroup && work) { 
      work = work.replace(textgroup+".",'');
      var version = $F('version_urn').match(/^.*?([^\.]+)$/)[1];
      // lookup citation labels from stored inventory data
      // for each citation level, add label and input to the #citeinfo div in the form
      var citeinfo = 
        inventories[inventory][textgroup].works[work].editions[version] != null ? 
        inventories[inventory][textgroup].works[work].editions[version].cites :
        inventories[inventory][textgroup].works[work].translations[version] != null ? 
        inventories[inventory][textgroup].works[work].translations[version].cites : [];
          
      var range = body_urn_parts.passage ? body_urn_parts.passage.split('-') : [];
      var values = [];
      for (var i=0; i<range.length;i++) {
        values[i] = range[i].split('.');
      } 
      $('citeinfo').insert('<span class="cite_span_label">From:</span>');
      
      for (var i=0; i<citeinfo.length; i++) {
        var value = (values[0] != null && values[0].length == citeinfo.length) ? values[0][i] : '';
        $('citeinfo').insert(
          '<label class="cite_from_label" for="cite_from' + i + '">' + citeinfo[i] + '</label>' +
          '<input type="text" name="cite_from_' + i + '" class="cite_from" value="' + value +'"/>');
      }
      $('citeinfo').insert('<br/><span class="cite_span_label">To:</span>');
        for (var i=0; i<citeinfo.length; i++) {
          var value = (values[1] != null && values[1].length == citeinfo.length) ? values[1][i] : '';
          $('citeinfo').insert(
            '<label class="cite_to_label" for="cite_to' + i + '">' + citeinfo[i] + '</label>' +
            '<input type="text" name="cite_to_' + i + '" class="cite_to" value="' + value +'"/>');
        }
    }
    $('request_button').disabled = false;
  }
  
  // Merges the individual components of the citation into the passage component of a CTS URN
  // and validates that at least one component of the starting citation was supplied before
  // submitting the form.
  function merge_cite_info() {
    var start =  $$('input[class="cite_from"]').map(function(e) { return e.value; }).grep(/[\w\d]+/);
    if (start.length == 0 ) {
      alert("Please specify at least one level of the passage citation scheme.");
      return false;
    }
    var end = $$('input[class="cite_to"]').map(function(e) { return e.value; }).grep(/[\w\d]+/);
    if (end.length > 0 && end.length != start.length) {
      alert("Citation start and end must be at the same citation level.");
      return false;
    }
    var urispace = repos.keys[$F('body_repo')]
    // if the body resource is from the identifier repo, then append the right id
    var props = body_props_from_form();
    if (props.item_id) {
      urispace = urispace + '/' + props.item_id
    }
    var uri =  urispace + "/" + $('version_urn').value + ':' + start.join('.');
    if (end.length > 0) {
      uri = uri + '-' + end.join('.');
    }
    var uri_match = new RegExp("^" + uri + '@');
    var old_uri_value = $('body_uri').value;
    // hack to prevent replacement of uri during board review
    if (old_uri_value.match(uri_match) == null && "#{(@identifier.mutable?).to_s}" == 'true') {
      $('body_uri').value = uri;
    }
    get_body_passage();
    return false;
  }
  
  function body_props_from_form() {
    var inventory = $F('body_repo');
    var textgroup = $F('group_urn');
    var work = $F('work_urn').replace(textgroup+".",''); 
    var version = $F('version_urn');
    var lookup_ver = version.match(/^.*?([^\.]+)$/)[1];
    var props = 
      inventories[inventory][textgroup].works[work].editions[lookup_ver] != null ? 
      inventories[inventory][textgroup].works[work].editions[lookup_ver] : 
      inventories[inventory][textgroup].works[work].translations[lookup_ver] != null ? 
      inventories[inventory][textgroup].works[work].translations[lookup_ver] : {};
    return props; 
  }
  
  function get_body_passage() {
    $('body_content').innerHTML = '<div class="loading">Loading...</div>';
    var passage =  $$('input[class="cite_from"]').map(function(e) { return e.value; }).grep(/[\w\d]+/).join('.');
    var end_range = $$('input[class="cite_to"]').map(function(e) { return e.value; }).grep(/[\w\d]+/).join('.');
    if (end_range.length > 0) {
      passage = passage + '-' + end_range;
    }
    var inventory = $F('body_repo');
    var textgroup = $F('group_urn');
    var work = $F('work_urn').replace(textgroup+".",''); 
    var version = $F('version_urn');
    var lookup_ver = version.match(/^.*?([^\.]+)$/)[1];
    var props = 
      inventories[inventory][textgroup].works[work].editions[lookup_ver] != null ? 
      inventories[inventory][textgroup].works[work].editions[lookup_ver] : 
      inventories[inventory][textgroup].works[work].translations[lookup_ver] != null ? 
      inventories[inventory][textgroup].works[work].translations[lookup_ver] : {};
    var lang = props.lang || 'default';
    var request_inventory = props.item_id || inventory; 

    var passage_url = "#{root_url}cts/getpassage/" + request_inventory  + "/" + version + ":" + passage;
    
    var tokenizer_cfg = JSON.parse('#{@identifier[:token_service_config]}');
  
    var tokenizer_url;
    if (tokenizer_cfg[lang]) {
      tokenizer_url = tokenizer_cfg[lang].request_url;
    } else {
      tokenizer_url = tokenizer_cfg['default'].request_url;
    }
     
    var data_xslt = '#{@identifier[:xslt_path]}';
    var request_url = tokenizer_url + encodeURIComponent(passage_url);
    jQuery.ajax({
      type: "GET",
      url: request_url,
      timeout: 20000}).done(
      function(a_data) {
        if (data_xslt != null) {
          jQuery.get(data_xslt).done(
            function(a_xsl) {
              var xsltProcessor = new XSLTProcessor();
              xsltProcessor.importStylesheet(a_xsl);
              var content = xsltProcessor.transformToDocument(a_data);
              if (jQuery("div",content).length > 0) {
                set_body_content(jQuery("div",content).get(0).innerHTML);
              } else {
                set_body_content('<div class="error">Requested citation not found.</div>');
              }
            }
          ).fail(
            function(req,status,err){
               set_body_content('<div class="error">Error transforming requested citation.</div>');
            }
          );          
        } else {
          set_body_content(a_data);
        }
      }).fail(
        function(req,status,err) {
          $('body_content').innerHTML = '<div class="error">Unable to load the requested text.(' + status + ':' + err + ')</div>';
        }
      ); 
  }
  
  
  function start_body(a_e) {
    var rp = a_e.element();
    // ignore anything except tokens
    if ($(rp).hasClassName('token')) {
      if ($(rp).hasClassName('punc')) {
        $(rp).next();
      } else {
        body_subref_start = rp;
      }
      
      toggle_body_highlight(false,['highlighted','selected']);
    }
  }
  
  function end_body(a_e) {
    var rp = a_e.element();
    if ($(rp).hasClassName('punc')) {
      body_subref_end = $(rp).previous();
    } else {
      body_subref_end = rp;
    }
    if (body_subref_start == null || body_subref_end == null) {
      //alert("Unable to identify the selected range. Please try your selection again.");
      return;
    }
    var start_ref = body_subref_start.readAttribute('data-ref');
    var end_ref = body_subref_end.readAttribute('data-ref')
    if (start_ref == null || end_ref == null) {
      //alert("Unable to read the selected range. Please try your selection again.");
      return;
    }
    body_span = [body_subref_start,body_subref_end];
    var new_uri = $('body_uri').value.split('@')[0] + "@" + start_ref;
    if (end_ref != start_ref) {
        new_uri = new_uri + '-' + end_ref;
     }
    $('body_uri').value = new_uri;
    toggle_body_highlight(true,['highlighted']);
  }
  
  function toggle_body_highlight(a_on,a_classes) {  
        var set = body_span
        if (set && set != null && set.length > 0) {
          a_classes.each(
            function(a_class) {
              if (a_on) {
                $(set[0]).addClassName(a_class);
              } else {
                $(set[0]).removeClassName(a_class);
              }
              
            }
          );
          var sibs = $(set[0]).nextSiblings();
          var done = false;
          if (set[0] != set[1]) {
            for (var i=0; i<sibs.length; i++) {
              if (done) {
                break;
              }
              a_classes.each(
                function(a_class) {
                  if (a_on) {
                    $(sibs[i]).addClassName(a_class);
                  } else {
                    $(sibs[i]).removeClassName(a_class);
                  }
                  if (sibs[i] == set[1]) {
                    done = true;
                  }
                }
              ); // end class iterator
            }  // end loop through siblings
          } // end test on set length
        } // end test on set definition
  }
  
  function set_body_content(a_html) {
    var body = $('body_content');
    $('body_content').innerHTML = a_html;
    var uri = $('body_uri').getValue();
    var u_match = uri.match(/^.*?urn:cts:(.*)$/)
    if (u_match != null) {
      var parts = u_match[1].split(/:/);
      if (parts.length == 3) {
        var r_match = parts[2].match(/^.*?@(.*)$/);
        var r_start;
        var r_end;
        if (r_match != null) {
          var r_parts = r_match[1].split(/-/);
          if (r_parts.length > 0) {
            r_start = r_parts[0];
            r_end = r_parts[1];
          } else {
            r_start = r_parts;
            r_end = r_parts;
          }
          var span_start = jQuery("#body_content .token.text[data-ref='" + r_start + "']");
          var span_end = jQuery("#body_content .token.text[data-ref='" + r_end + "']");
          // highlight the tokens if able to find them
          if (span_start.length > 0 && span_end.length > 0) {
            body_span = [span_start.get(0),span_end.get(0)];
          }
        }
      }
    }
    toggle_body_highlight(true,['highlighted']);
  }
  
  document.observe("dom:loaded", function() {
    get_repos();
    $('group_urn').observe('change',update_work_urns);
    $('work_urn').observe('change',update_version_urns);
    $('version_urn').observe('change',update_cite_info);
    $('body_content').observe('mousedown',start_body);
    $('body_content').observe('mouseup',end_body);
    jQuery(".cts_selector_hint").click( function() { jQuery("#cts_select_container").toggle(); });

  });

%p{:class => ['cts_selector_hint']}== Click  to show/hide available textual sources
#cts_select_container{:style => "display:none;"}    
  = select_tag 'body_repo', nil, :onchange => "get_inventory();"
  = select_tag 'group_urn', nil, :disabled => true, :style => 'min-width: 5em;'
  = select_tag 'work_urn', nil, :disabled => true, :style => 'min-width: 5em;'
  = select_tag 'version_urn', nil, :disabled => true, :style => 'min-width: 5em;'
  #citeinfo
  %button{:disabled => true, :id => 'request_button', :onclick => "return merge_cite_info();"}Request Resource
  %p Resource passage:
  #body_content 
    